#+Title: DNSC Emacs Config
#+Author: Dennis Schoepf
#+Description: My emacs config based
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el

* Important to load first
** Early Init
This should be set before loading the ~init.el~ file.

#+begin_src emacs-lisp :tangle ./early-init.el
(setq package-enable-at-startup nil)

;; Make the title bar transparent
(add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))

;; And give the frame itself a little bit of opacity
(set-frame-parameter (selected-frame) 'alpha 96)
(add-to-list 'default-frame-alist '(alpha . 96))

#+end_src

** Startup Performance
Make startup faster by reducing the frequency of garbage collection. This will be set back when startup finishes.

#+begin_src emacs-lisp
;;;-*- lexical-binding: t; -*-
;; The default is 800 kilobytes. Measured in bytes.
(setq gc-cons-threshold (* 50 1000 1000))
#+end_src

** User Info
Setting my user info for functions that depend on it.

#+begin_src emacs-lisp
(setq user-full-name "Dennis Schoepf"
      user-mail-address "me@dnsc.io")
#+end_src

** Auto-Tangle Configuration
This auto tangles the configuration on saving.

#+begin_src emacs-lisp
(defun start/org-babel-tangle-config ()
  "Automatically tangle our Emacs.org config file when we save it. Credit to Emacs From Scratch for this one!"
  (when (string-equal (file-name-directory (buffer-file-name))
					  (expand-file-name user-emacs-directory))
	;; Dynamic scoping to the rescue
	(let ((org-confirm-babel-evaluate nil))
	  (org-babel-tangle))))

(add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'start/org-babel-tangle-config)))
#+end_src

** Package Management
I am using ~elpaca~ as my package manager of choice.

#+begin_src emacs-lisp
(defvar elpaca-installer-version 0.8)
(defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
(defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
(defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
(defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                              :ref nil :depth 1
                              :files (:defaults "elpaca-test.el" (:exclude "extensions"))
                              :build (:not elpaca--activate-package)))
(let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
       (build (expand-file-name "elpaca/" elpaca-builds-directory))
       (order (cdr elpaca-order))
       (default-directory repo))
  (add-to-list 'load-path (if (file-exists-p build) build repo))
  (unless (file-exists-p repo)
    (make-directory repo t)
    (when (< emacs-major-version 28) (require 'subr-x))
    (condition-case-unless-debug err
        (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                 ((zerop (apply #'call-process `("git" nil ,buffer t "clone"
                                                 ,@(when-let ((depth (plist-get order :depth)))
                                                     (list (format "--depth=%d" depth) "--no-single-branch"))
                                                 ,(plist-get order :repo) ,repo))))
                 ((zerop (call-process "git" nil buffer t "checkout"
                                       (or (plist-get order :ref) "--"))))
                 (emacs (concat invocation-directory invocation-name))
                 ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                       "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                 ((require 'elpaca))
                 ((elpaca-generate-autoloads "elpaca" repo)))
            (progn (message "%s" (buffer-string)) (kill-buffer buffer))
          (error "%s" (with-current-buffer buffer (buffer-string))))
      ((error) (warn "%s" err) (delete-directory repo 'recursive))))
  (unless (require 'elpaca-autoloads nil t)
    (require 'elpaca)
    (elpaca-generate-autoloads "elpaca" repo)
    (load "./elpaca-autoloads")))
(add-hook 'after-init-hook #'elpaca-process-queues)
(elpaca `(,@elpaca-order))

;; Install use-package support
(elpaca elpaca-use-package
  ;; Enable use-package :ensure support for Elpaca.
  (elpaca-use-package-mode)
  (setq elpaca-use-package-by-default t))

;; Block until current queue processed.
(elpaca-wait)

;;When installing a package which modifies a form used at the top-level
;;(e.g. a package which adds a use-package key word),
;;use `elpaca-wait' to block until that package has been installed/configured.
;;For example:
;;(use-package general :ensure t :demand t)
;;(elpaca-wait)
#+end_src

** Setup PATH
Make sure to have the same ~PATH~ as in my shell.

#+begin_src emacs-lisp
(use-package exec-path-from-shell
  :ensure t
  :config
  (when (memq window-system '(mac ns x))
  (exec-path-from-shell-initialize)))
#+end_src

* Keybindings
** Evil Mode
An extensible vi/vim layer for Emacs. Because…let’s face it. The Vim keybindings are just plain better.
Notes:
- You can toggle evil mode with C-z.
- To paste without copy (yank) select the text and use P (shift-p).

#+begin_src emacs-lisp
(use-package evil
  :init ;; Execute code Before a package is loaded
  (evil-mode)
  (setq evil-want-C-i-jump nil)
  :config ;; Execute code After a package is loaded
  (evil-set-initial-state 'eat-mode 'insert) ;; Set initial state in eat terminal to insert mode
  :custom ;; Customization of package custom variables
  (evil-want-keybinding nil)    ;; Disable evil bindings in other modes (It's not consistent and not good)
  (evil-want-C-u-scroll t)      ;; Set C-u to scroll up
  (evil-want-C-i-jump nil)      ;; Disables C-i jump
  (evil-undo-system 'undo-fu) 
  (org-return-follows-link t)   ;; Sets RETURN key in org-mode to follow links
  ;; Unmap keys in 'evil-maps. If not done, org-return-follows-link will not work
  :bind (:map evil-motion-state-map
			  ("SPC" . nil)
			  ("RET" . nil)
			  ("TAB" . nil)))

(use-package evil-collection
  :after evil
  :config
  ;; Setting where to use evil-collection
  (setq evil-collection-mode-list '(dired ibuffer magit corfu vertico consult))
  (evil-collection-init))

(use-package evil-goggles
  :after evil
  :config
  (setq evil-goggles-duration 0.100)
  (setq evil-goggles-enable-delete nil)
  (setq evil-goggles-enable-paste nil)
  (setq evil-goggles-enable-change nil)
  (evil-goggles-mode)
  (evil-goggles-use-diff-faces))

(use-package evil-org
  :after org
  :hook (org-mode . (lambda () evil-org-mode))
  :config
  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys))
#+end_src

** General Keybindings
A keybinding framework to set keybindings easily.
The Leader key is what you will press when you want to access your keybindings (SPC + . Find file).
To search and replace, use query-replace-regexp to replace one by one C-M-% (SPC to replace n to skip).

#+begin_src emacs-lisp
(defun dnsc/dired-open-to-side ()
  "Opens dired at the current directory in a window to the side"
  (interactive)
  (split-window-horizontally)
  (windmove-right)
  (dired-jump))

(defun dnsc/open-agenda-only-window ()
  "Opens agenda in full-screen (only-window)"
  (interactive)
  (let (current-value org-agenda-window-setup)
		(unwind-protect
				(progn
					(setq org-agenda-window-setup 'only-window)
					(org-agenda nil "w"))
			(setq org-agenda-window-setup current-value))))

(use-package general
  :config
  (general-evil-setup)
  ;; Set up 'SPC' as the leader key
  (general-create-definer start/leader-keys
		:states '(normal insert visual motion emacs)
		:keymaps 'override
		:prefix "SPC"           ;; Set leader key
		:global-prefix "C-SPC") ;; Set global leader key

  (start/leader-keys
		"." '(find-file :wk "Find file"))

  (start/leader-keys
		"SPC" '(project-find-file :wk "[f]ind a file in the project"))

  (start/leader-keys
		"TAB" '(tabspaces-open-or-create-project-and-workspace  :wk "Open or create workspace with project"))

  (start/leader-keys
		"f" '(:ignore t :wk "[f]ind")
		"f c" '((lambda () (interactive) (find-file "~/.emacs.d/README.org")) :wk "Edit emacs [c]onfig")
		"f s" '(save-buffer :wk "Saves current buffer")
		"f r" '(consult-recent-file :wk "Find [r]ecent files")
		"f f" '(consult-fd :wk "Find [f]iles")
		"f h" '(consult-org-heading :wk "Find [h]eadline")
		"f y" '(consult-yank-from-kill-ring :wk "[y]ank from kill ring")
		"f g" '(consult-ripgrep :wk "Find with rip[g]rep")
		"f l" '(consult-goto-line :wk "Find [l]ine")
		"f i" '(consult-imenu :wk "Find [i]menu buffer locations"))

  (start/leader-keys
		"b" '(:ignore t :wk "[b]uffers")
		"b b" '(consult-buffer :wk "switch to [b]uffer")
		"b d" '(kill-current-buffer :wk "[d]elete this buffer")
		"b n" '(next-buffer :wk "[n]ext buffer")
		"b p" '(previous-buffer :wk "[p]revious buffer")
		"b r" '(revert-buffer :wk "[r]eload buffer"))

  (start/leader-keys
		"w" '(:ignore t :wk "[w]indow")
		"w s" '(split-window-vertically :wk "[s]plit window horizontally")
		"w v" '(split-window-horizontally :wk "Split window [v]ertically")
		"w d" '(delete-window :wk "[d]elete window")
		"w h" '(windmove-left :wk "Move to left window")
		"w k" '(windmove-up :wk "Move to upper window")
		"w j" '(windmove-down :wk "Move to lower window")
		"w l" '(windmove-right :wk "Move to right window")
		"w z" '(zoom-window-zoom :wk "Toggle [z]oom for current window"))

  (start/leader-keys
		"n" '(dired-jump :wk "ope[n] dired at current directory"))

  (start/leader-keys
		"B" '(tabspaces-switch-buffer-and-tab :wk "Show all [B]uffers and switch to project and buffer"))

  (start/leader-keys
		"o" '(:ignore t :wk "[o]pen")
		"o d" '(dnsc/dired-open-to-side :wk "Open [d]ired on the side")
		"o l" '(org-agenda :wk "Open al[l] agenda views")
		"o a" '((lambda () (interactive) (org-agenda nil "p")) :wk "Open personal [a]genda")
		"o w a" '((lambda () (interactive) (org-agenda nil "w")) :wk "Open work [a]genda")
		"o w f" '(dnsc/open-agenda-only-window :wk "Open work [a]genda")
		"o w n" '((lambda () (interactive) (find-file "~/orgnzr/work.org")) :wk "Open work [n]ote")
		"o n n" '(org-roam-node-find :wk "Open roam note")
		"o n i" '(org-roam-node-insert :wk "Insert roam note")
		"o n t" '(org-roam-buffer-toggle :wk "Toggle roam buffer")
		"o c" '(org-capture :wk "[o]rg-[c]apture a new task"))

  (start/leader-keys
		"g" '(:ignore t :wk "[g]it & more")
		"g l" '(git-link :wk "Navigate to git forge [l]ink")
		"g c c" '(comment-line :wk "[g]o [c]omment [c]urrent line")
		"g c r" '(comment-or-uncomment-region :wk "[g]o [c]omment [r]egion")
		"g g" '(magit-status :wk "Ma[g]it status"))

  (start/leader-keys
		"h" '(:ignore t :wk "[h]elp") ;; To get more help use C-h commands (describe variable, function, etc.)
		"h s" '(describe-symbol :wk "Get help for [s]ymbol")
		"h v" '(describe-variable :wk "Get help for [v]ariable")
		"h f" '(describe-function :wk "Get help for [f]unction")
		"h r r" '((lambda () (interactive) (load-file user-init-file)) :wk "Reload Emacs config"))

  (start/leader-keys
		"p" '(:ignore t :wk "[p]rojects") ;; To get more help use C-h commands (describe variable, function, etc.)
		"p g" '(consult-ripgrep :wk "[s]earch within project") ;; Maybe use something else here
		"p s" '(project-shell :wk "Open [s]hell within project")
		"p d" '(project-dired :wk "Open [d]ired in project root")
		"p c" '(project-compile :wk "[c]ompile project")
		"p k" '(project-kill-buffers :wk "[d]elete all project buffers")
		"p r" '(project-query-replace-regexp :wk "[r]eplace in current project")
		"p x" '(project-async-shell-command :wk "e[x]ecute shell command"))
  
  (start/leader-keys
		"s" '(:ignore t :wk "[s]earch/[s]pell")
		"s c" '(jinx-correct :wk "[c]orrect spelling")
		"s l" '(jinx-languages :wk "Jinx [l]anguages"))

  (start/leader-keys
		"t" '(:ignore t :wk "[t]abspaces")
		"t s" '(tabspaces-save-session :wk "[s]ave session")
		"t r" '(tabspaces-restore-session :wk "[r]estore session")
		"t d" '(tabspaces-close-workspace :wk "[d]elete tabspace")
		"t D" '(tabspaces-clear-buffers :wk "[D]elete tabspace except current buffer")
		"t x" '(tabspaces-kill-buffers-close-workspace :wk "Delete tabspace and clear all open buffers"))

  (start/leader-keys
		"q" '(:ignore t :wk "[q]uit")
		"q q" '(kill-emacs :wk "[q][q]uit Emacs and Daemon")))
#+end_src

** Which-Key
I am still learning all the keybindings that Emacs provides (including the ones I have set).

#+begin_src emacs-lisp
(use-package which-key
  :diminish
  :init
  (which-key-mode 1)
  :custom
  (which-key-side-window-location 'bottom)
  (which-key-sort-order #'which-key-key-order-alpha) ;; Same as default, except single characters are sorted alphabetically
  (which-key-sort-uppercase-first nil)
  (which-key-add-column-padding 4) ;; Number of spaces to add to the left of each column
  (which-key-min-display-lines 6)  ;; Increase the minimum lines to display, because the default is only 1
  (which-key-idle-delay 0.5)       ;; Set the time delay (in seconds) for the which-key popup to appear
  (which-key-max-description-length 35)
  (which-key-allow-imprecise-window-fit nil)) 
#+end_src

* General
** Better Defaults
These are some defaults to make Emacs look nicer initially.

#+begin_src emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)

(use-package emacs
  :ensure nil
  :custom
  ;; Disable unwanted elements
  (menu-bar-mode nil)
  (scroll-bar-mode nil)
  (tool-bar-mode nil)
  (inhibit-startup-screen t)
  (ring-bell-function 'ignore)
  (blink-cursor-mode nil)
  
  ;; Configure the tab bar to work well with tabspaces.el
  (tab-bar-mode nil)
  (tab-bar-show nil)
  (tab-bar-close-button-show nil)
  (tab-bar-new-button-show nil)
  (tab-bar-auto-width nil)
	
	;; Set scratch buffer message
	(initial-scratch-message ";; Let's start ...\n")

  ;; Set some global modes
  (global-visual-line-mode t)
  (delete-selection-mode t)
  (electric-pair-mode t)
  (global-auto-revert-mode t)
  (recentf-mode t)
  (visible-bell t)
	(pixel-scroll-precision-mode t)
  
  ;; Set some text editing defaults
	(electric-indent-mode t)
  (tab-width 2)
  (fill-column 100)
  (display-line-numbers-type 'relative)
  
  ;; Configure scroll behavior
  (mouse-wheel-progressive-speed nil)
  (scroll-conservatively 10)
  (scroll-margin 8)
  
  ;; Undo behavior
  (undo-limit 67108864)
  (undo-strong-limit 100663296)
  (undo-outer-limit 1006632960)
  
  ;; Use encrypted authinfo file for auth-sources
  (auth-sources '("~/.authinfo.gpg"))
  
	;; Do not show native comp warning
	(native-comp-async-report-warnings-errors nil)
  :hook
  (prog-mode . display-line-numbers-mode)
  (prog-mode . hl-line-mode)
  (prog-mode . (lambda () (hs-minor-mode t)))
  :init
  ;; MacOS specfic configuration
  (when (eq system-type 'darwin)
		(setq mac-right-option-modifier "none")
		(setq insert-directory-program "/opt/homebrew/bin/gls"))

  ;; Move customized variables to separate file
  (setq custom-file (locate-user-emacs-file "custom-vars.el"))
  (load custom-file 'noerror 'nomessage)
  :bind
  (([escape] . keyboard-escape-quit)))
#+end_src

** File & Folder Management
I aim to manage all my files and folders only with ~dired~ and ~dired-x~. This configuration will probably be extended as I am growing accustomed to it. Currently it is configured to just hide dot files.

#+begin_src emacs-lisp
(use-package emacs
  :ensure nil
  :custom
  (wdired-allow-to-change-permissions t)
  (wdired-use-interactive-rename t)
  (wdired-confirm-overwrite t))

(use-package dired
	:ensure nil
	:custom
	(dired-listing-switches "-lah --group-directories-first")
	(dired-dwim-target t)
	(dired-kill-when-opening-new-dired-buffer t))

(use-package dired-narrow
	:ensure t
	:bind (:map dired-mode-map ("\C-s" . dired-narrow)))

(use-package dired-x
  :ensure nil
	:bind (:map dired-mode-map ("\C-h" . dired-omit-mode))
  :config
  (setq dired-omit-files
				(concat dired-omit-files "\\|^\\..+$"))
	:hook
	(dired-mode . dired-omit-mode))

(use-package all-the-icons
	:ensure t)

(use-package all-the-icons-dired
	:ensure t
	:hook
	(dired-mode . all-the-icons-dired-mode))

(use-package diredfl
	:ensure t
	:hook
	(dired-mode . diredfl-mode))
#+end_src

*** TODO Add ~dired-peep~
See [[https://gitlab.com/dwt1/configuring-emacs/-/blob/main/07-the-final-touches/config.org?ref_type=heads#backup][this]].

** Window Zoom
I regularly use tmux's (or WezTerm for that matter) zoom feature, so naturally I want it in Emacs, too.

#+begin_src emacs-lisp
(use-package zoom-window
  :ensure t
  :custom
  (zoom-window-mode-line-color "DarkSlateGray"))
#+end_src

** Unique Buffer Names
This package makes sure that each buffer name is unique.

#+begin_src emacs-lisp
(use-package uniquify
  :ensure nil
  :config
  (setq uniquify-buffer-name-style 'forward))
#+end_src

** Workspace Management
Similar to my WezTerm setup I want one session per project. I am on the lookout on how to achieve this with project.el and packages like easysession.el. [[https://github.com/nex3/perspective-el][perspective.el]] might be what I need regarding the buffer setup.

*UPDATE:* After consideration of a number of packages [[https://github.com/mclear-tools/tabspaces][tabspaces.el]] seems to do all that is necessary (project-specific buffers per tab, automatic sessions, easy project/tab switching). I need to add [[https://github.com/mclear-tools/tabspaces?tab=readme-ov-file#consult][additional configuration]] to make it work well with ~consult~ though.

#+begin_src emacs-lisp
;; consult-buffer only shows workspace buffers unless 'b' is pressed
(with-eval-after-load 'consult
(consult-customize consult--source-buffer :hidden t :default nil)
(defvar consult--source-workspace
  (list :name     "Workspace Buffers"
        :narrow   ?w
        :history  'buffer-name-history
        :category 'buffer
        :state    #'consult--buffer-state
        :default  t
        :items    (lambda () (consult--buffer-query
                         :predicate #'tabspaces--local-buffer-p
                         :sort 'visibility
                         :as #'buffer-name)))

  "Set workspace buffer list for consult-buffer.")
(add-to-list 'consult-buffer-sources 'consult--source-workspace))

(use-package tabspaces
  :ensure (:host github :repo "mclear-tools/tabspaces")
  :hook (after-init . tabspaces-mode)
  :commands (tabspaces-switch-or-create-workspace
             tabspaces-open-or-create-project-and-workspace)
  :custom
  (tabspaces-use-filtered-buffers-as-default t)
  (tabspaces-default-tab "main")
  (tabspaces-remove-to-default t)
  (tabspaces-include-buffers '("*scratch*"))
  (tabspaces-initialize-project-with-todo nil)
  (tabspaces-session t)
  (tab-bar-new-tab-choice "*scratch*")
	(tab-bar-mode nil))
#+end_src

** Undo Functionality 
~undo-fu~ (together with ~undo-fu-session~) allows me to have persistent undo/redo over multiple sessions and undo/redo in a region. ~vundo~ enhances the functionality by visualizing undo/redo steps in a tree structure.

#+begin_src emacs-lisp
(use-package undo-fu
  :ensure t
  :custom
  (undo-fu-allow-undo-in-region t))

(use-package undo-fu-session
  :ensure t
  :config
  (setq undo-fu-session-incompatible-files '("/COMMIT_EDITMSG\\'" "/git-rebase-todo\\'"))
	(undo-fu-session-global-mode t))

(use-package vundo
  :ensure t
  :custom
  (vundo-glyph-alist vundo-unicode-symbols))
#+end_src

** Modeline
Using ~doom-modeline~ as I originally started with Doom Emacs. Might be switching to [[https://gitlab.com/jessieh/mood-line][mood-line]] or the built-in modeline.

#+begin_src emacs-lisp
(use-package evil-anzu)

(use-package anzu
  :init
  (global-anzu-mode +1))

(use-package doom-modeline
  :ensure t
  :custom
  (doom-modeline-workspace-name t)
  (doom-modeline-position-column-line-format '("%l:%c"))
  (doom-modeline-height 28)
  (doom-modeline-buffer-file-name-style 'relative-to-project)
  (doom-modeline-major-mode-icon nil)
  (doom-modeline-buffer-modification-icon nil)
  (doom-modeline-unicode-fallback t)
  :hook (after-init . doom-modeline-mode))
#+end_src

* Projects
For better or worse I do work with monorepos. Thus I need the option to narrow down projects within a single vc-backed directory. Luckily ~project.el~ allows me to customize ~project-vc-extra-root-markers~ with additional markers. I've added some root markers for the languages I currently work with. To manually add a non-vc-backed directory a ~.project~ file can be added to any directory. If the project is not recognized right away by ~project.el~ I can run ~M-x project-remember-projects-under RET ./parent-dir-or-project-dir~.

#+begin_src emacs-lisp
(use-package project
  :ensure nil
  :custom
  (project-vc-ignores '("target/" "bin/" "out/" "node_modules/"))
  (project-vc-extra-root-markers '(".project" "package.json" "Cargo.toml" "go.mod" "Gemfile")))
#+end_src

** TODO Highlight Todos
Use ~hl-todo~.

* Appearance
** Theme
Coming from Neovim and TUI-based tools in general I mainly used widely available color themes on all platforms (e.g. ~catppuccin~ or ~rose-pine~). After trying it out for a few minutes the built-in modus-themes won me over, though. The exceptional support of Emacs' faces as well as the ergonomic overrides and options for [[https://protesilaos.com/emacs/modus-themes#h:f4651d55-8c07-46aa-b52b-bed1e53463bb][advanced customization]] is just that good.

#+begin_src emacs-lisp
(use-package modus-themes
	:ensure t
  :config

  (custom-set-faces
   '(tab-bar ((t (:height 0.85))))
   '(tab-bar-tab-inactive
     ((t (:slant italic :foreground "#606270")))))
  
  (setq modus-themes-common-palette-overrides
		'((border-mode-line-active bg-mode-line-active)
          (border-mode-line-inactive bg-mode-line-inactive)
		  (fg-heading-1 blue-cooler)
		  (prose-done fg-dim)
		  (prose-done fg-dim)
		  (fringe unspecified)
		  (bg-line-number-inactive unspecified)
          (bg-line-number-active bg-dim)
          (bg-hl-line bg-dim)
		  (bg-prose-block-delimiter unspecified)
		  (bg-tab-bar bg-main)
		  (bg-tab-current bg-main)
		  (bg-tab-other bg-main)
		  (comment fg-dim)))

  (setq modus-themes-fringes nil)
  (setq modus-themes-italic-constructs t)
  (setq modus-themes-bold-constructs t)
  (setq modus-themes-mixed-fonts t)
  (setq modus-themes-custom-auto-reload t)

  (load-theme 'modus-vivendi-tinted))
#+end_src

** Fonts
Defining the fonts I am using. Currently only ~VictorMono as a nerd font~.

#+begin_src emacs-lisp
(set-face-attribute 'default nil
					:font "VictorMono Nerd Font"
					:height 180
					:weight 'normal)
(set-face-attribute 'variable-pitch nil
					:font "VictorMono Nerd Font"
					:height 180
					:weight 'normal)
(set-face-attribute 'fixed-pitch nil
					:font "VictorMono Nerd Font"
					:height 180
					:weight 'normal)
;; Makes commented text and keywords italics.
;; This is working in emacsclient but not emacs.
;; Your font must have an italic face available.
(set-face-attribute 'font-lock-comment-face nil
					:slant 'italic)
(set-face-attribute 'font-lock-keyword-face nil
					:slant 'italic)

;; This sets the default font on all graphical frames created after restarting Emacs.
;; Does the same thing as 'set-face-attribute default' above, but emacsclient fonts
;; are not right unless I also add this method of setting the default font.
(add-to-list 'default-frame-alist '(font . "VictorMono Nerd Font-18"))

;; Uncomment the following line if line spacing needs adjusting.
(setq-default line-spacing 0.12)
#+end_src

** Delimiters
To make it easier to spot delimiter issues I am using rainbow-delimiters.

#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

** Zooming In/Out
You can use the bindings C-+ C-- for zooming in/out. You can also use CTRL plus the mouse wheel for zooming in/out.

#+begin_src emacs-lisp
(use-package emacs
  :ensure nil
  :bind
  ("C-+" . text-scale-increase)
  ("C--" . text-scale-decrease)
  ("<C-wheel-up>" . text-scale-increase)
  ("<C-wheel-down>" . text-scale-decrease))
#+end_src

* Completion
** Completion Style
The ~orderless~ completion style seems to be what everyone is using now. Trying it out currently.

#+begin_src emacs-lisp
(use-package orderless
  :custom
  (completion-styles '(orderless partial-completion basic))
  (completion-category-defaults nil)
  (completion-category-overrides nil))
#+end_src

** Mini-buffer
- Vertico: Provides a performant and minimalist vertical completion UI based on the default completion system.
- Savehist: Saves completion history.
- Marginalia: Adds extra metadata for completions in the margins (like descriptions).

We use this packages, because they use Emacs native functions. Unlike Ivy or Helm.
One alternative is ivy and counsel, check out the [[https://github.com/MiniApollo/kickstart.emacs/wiki][project wiki]] for more information.

#+begin_src emacs-lisp
(use-package vertico
  :init
  (vertico-mode))

(savehist-mode) ;; Enables save history mode

(use-package marginalia
  :after vertico
  :init
  (marginalia-mode))
#+end_src

** In-Buffer
For in-buffer completion, ~corfu~ is used.

#+begin_src emacs-lisp
(use-package corfu
	:ensure t
  :custom
  (corfu-cycle t)
  (corfu-quit-at-boundary nil)
  (corfu-preselect 'prompt)
  (corfu-on-exact-match nil)
  (corfu-quit-no-match nil)
	(corfu-auto t)
  (corfu-quit-no-match t)
	(corfu-auto-prefix 2)
  (corfu-popupinfo-mode t)
  (corfu-popupinfo-delay 0.5)
  :bind
  (:map corfu-map
				("RET" . corfu-complete)
        ("TAB" . corfu-next)
        ([tab] . corfu-next)
        ("S-TAB" . corfu-previous)
        ([backtab] . corfu-previous))
  :init
  (global-corfu-mode))

(use-package nerd-icons-corfu
	:ensure t
  :after corfu
  :init (add-to-list 'corfu-margin-formatters #'nerd-icons-corfu-formatter))

(use-package emacs
  :ensure nil
  :custom
  (tab-always-indent 'complete)
  (text-mode-ispell-word-completion nil)
  (read-extended-command-predicate #'command-completion-default-include-p))

(use-package cape
	:ensure t
  :bind ("C-c p" . cape-prefix-map)
	:init
	(add-hook 'completion-at-point-functions #'cape-file)
	(add-hook 'completion-at-point-functions #'cape-keyword)
	(add-hook 'completion-at-point-functions #'cape-elisp-symbol)
	(add-hook 'completion-at-point-functions #'cape-elisp-block))
#+end_src

* Consult
Provides search and navigation commands based on the Emacs completion function.
Check out their [[https://github.com/minad/consult][git repository]] for more awesome functions.

#+begin_src emacs-lisp
(use-package consult
  ;; Enable automatic preview at point in the *Completions* buffer. This is
  ;; relevant when you use the default completion UI.
  :hook (completion-list-mode . consult-preview-at-point-mode)
  :init
  ;; Optionally configure the register formatting. This improves the register
  ;; preview for `consult-register', `consult-register-load',
  ;; `consult-register-store' and the Emacs built-ins.
  (setq register-preview-delay 0.5
        register-preview-function #'consult-register-format)

  ;; Optionally tweak the register preview window.
  ;; This adds thin lines, sorting and hides the mode line of the window.
  (advice-add #'register-preview :override #'consult-register-window)

  ;; Use Consult to select xref locations with preview
  (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref)
  :config
  ;; Optionally configure preview. The default value
  ;; is 'any, such that any key triggers the preview.
  ;; (setq consult-preview-key 'any)
  ;; (setq consult-preview-key "M-.")
  ;; (setq consult-preview-key '("S-<down>" "S-<up>"))

  ;; For some commands and buffer sources it is useful to configure the
  ;; :preview-key on a per-command basis using the `consult-customize' macro.
  ;; (consult-customize
  ;; consult-theme :preview-key '(:debounce 0.2 any)
  ;; consult-ripgrep consult-git-grep consult-grep
  ;; consult-bookmark consult-recent-file consult-xref
  ;; consult--source-bookmark consult--source-file-register
  ;; consult--source-recent-file consult--source-project-recent-file
  ;; :preview-key "M-."
  ;; :preview-key '(:debounce 0.4 any))

  ;; By default `consult-project-function' uses `project-root' from project.el.
  ;; Optionally configure a different project root function.
   ;;;; 1. project.el (the default)
  ;;(setq consult-project-function #'consult--default-project--function)
   ;;;; 2. vc.el (vc-root-dir)
  ;; (setq consult-project-function (lambda (_) (vc-root-dir)))
   ;;;; 3. locate-dominating-file
  ;; (setq consult-project-function (lambda (_) (locate-dominating-file "." ".git")))
   ;;;; 4. projectile.el (projectile-project-root)
  ;;(autoload 'projectile-project-root "projectile")
  ;;(setq consult-project-function (lambda (_) (projectile-project-root)))
   ;;;; 5. No project support
  (setq consult-project-function nil)
  )
#+end_src

** TODO Change consult project to projectile after configuring it

* Git
** Diff in Gutter
Highlights uncommitted changes on the left side of the window (area also known as the "gutter"), allows you to jump between and revert them selectively.

#+begin_src emacs-lisp
(use-package diff-hl
  :ensure t
  :custom
  (diff-hl-draw-borders nil)
  :hook ((dired-mode         . diff-hl-dired-mode-unless-remote)
         (magit-pre-refresh  . diff-hl-magit-pre-refresh)
         (magit-post-refresh . diff-hl-magit-post-refresh))
  :init (global-diff-hl-mode))
#+end_src

** Magit
Currently I use ~lazygit~ at work. Within Emacs nothing beats ~magit~ though. ~forge~ is added for GitHub integration. A succinct guide to setting it up can be found [[https://practical.li/spacemacs/source-control/forge-configuration/][here]]. Note: A ~classic~ token has to be generated for GitHub. It was also necessary to install to do the following on MacOS to set up GPG for to use encrypted ~.authinfo.gpg~:

#+begin_src shell
brew install gpg pinentry-mac
export GPG_TTY=$(tty)
echo "pinentry-program $(which pinentry-mac)" >> ~/.gnupg/gpg-agent.conf
killall gpg-agent
#+end_src

The actual magit/forge config can be found here:

#+begin_src emacs-lisp
(use-package magit
  :custom
  (magit-display-buffer-function 'magit-display-buffer-same-window-except-diff-v1)
  (magit-repository-directories (list (cons elpaca-repos-directory 1)))
  (magit-diff-refine-hunk 'all)
  :config
  (transient-bind-q-to-quit))
(use-package transient :defer t) 
(use-package forge
  :after magit
  :init (setq forge-add-default-bindings nil
              forge-display-in-status-buffer nil
              forge-add-pullreq-refspec nil))
#+end_src

*** TODO Add Magit keybindings
See [[https://gitlab.com/dwt1/configuring-emacs/-/blob/main/07-the-final-touches/config.org?ref_type=heads#backup
][this]].

** GitHub Permalinks
I often visit and copy a link to a specific line for my colleagues. This functionality is provided by ~git-link~.

#+begin_src emacs-lisp
(use-package git-link
  :custom
  (git-link-open-in-browser t))
#+end_src

** TODO Git Timemachine
See [[https://gitlab.com/dwt1/configuring-emacs/-/blob/main/07-the-final-touches/config.org?ref_type=heads#backup
][this]].

* Org Mode
** Base Configuration
My org mode specific configuration.

#+begin_src emacs-lisp
(use-package org
  :ensure nil
  :custom
  (org-directory "~/orgnzr/")
  ;; Fixing source block indentation
  (org-src-tab-acts-natively t)
  (org-edit-src-content-indentation 0)
  (org-edit-src-preserve-indentation nil)
  (org-log-done 'note)
  (org-startup-folded t)
  (org-startup-indented t)
  (org-todo-keywords
   '((sequence "PROJECT(p)" "TODO(t)" "NEXT(n)" "|" "DONE(d)")))
  (org-default-notes-file "~/orgnzr/inbox.org")
  (org-agenda-files '("~/orgnzr"))
  (org-hide-emphasis-markers t)
  (org-pretty-entities t)
  (org-refile-targets
   '((nil :maxlevel . 5)
     (org-agenda-files :maxlevel . 5)))
  (org-capture-templates
   '(("t" "Task" entry (file "~/orgnzr/inbox.org")
      "* TODO %?\n %i\n")
     ("l" "Task  line" entry (file "~/orgnzr/inbox.org")
      "* TODO %?\n Relevant line: [[file://%F::%(with-current-buffer (org-capture-get :original-buffer) (number-to-string (line-number-at-pos)))]]\n")
	 ("w" "Work Task" entry (file+olp+datetree "~/orgnzr/work.org")
    "* TODO %?\n")))
  (org-agenda-custom-commands
   '(("p" "Personal" 
	  ((agenda "")
	  (todo "NEXT" ((org-agenda-overriding-header "Next Tasks"))))
	  ((org-agenda-tag-filter-preset '("-work"))))
	 ("w" "Work"
	  ((agenda "")
	  (tags "+work+TODO=\"NEXT\"" ((org-agenda-overriding-header "Time-Insensitive Tasks")))
	  (tags "+work+TODO=\"TODO\""
			((org-agenda-overriding-header "Unscheduled Tasks")
			 (org-agenda-skip-function '(org-agenda-skip-entry-if 'timestamp)))))
	  ((org-agenda-tag-filter-preset '("+work"))))))
  :hook
  (org-mode . org-indent-mode)
  (org-mode . (lambda() (electric-indent-local-mode -1)))
  (org-mode . (lambda ()
                (setq-local electric-pair-inhibit-predicate
                            `(lambda (c)
                               (if (char-equal c ?<) t (,electric-pair-inhibit-predicate c)))))))
      #+end_src

** Beautify Org Mode
I am using [[https://github.com/minad/org-modern?tab=readme-ov-file][org-modern]] to make org-mode a bit more pleasant to the eye.

#+begin_src emacs-lisp
(use-package org-modern
  :ensure t
  :custom
  (org-modern-star 'replace)
  :hook 
  (org-mode . org-modern-mode)
  (org-agenda-finalize . org-modern-agenda))
#+end_src

Additionally [[https://codeberg.org/joostkremers/visual-fill-column][Visual-Fill-Column]] is used to center the text.

#+begin_src emacs-lisp
(use-package visual-fill-column
  :ensure t
  :custom
  (visual-fill-column-center-text t)
  (visual-fill-column-enable-sensible-window-split t)
  (visual-fill-column-fringes-outside-margins t)
  :hook
  (org-mode . visual-fill-column-mode))
#+end_src

** Source Code Block Tag Expansion
Org-tempo is not a separate package but a module within org that can be enabled.
Org-tempo allows for '<s' followed by TAB to expand to a begin_src tag.

#+begin_src emacs-lisp
(use-package org-tempo
  :ensure nil
  :after org)
#+end_src

** Org Drill
I am currently learning Spanish and was looking for a spaced repetition system similar to Anki cards for Emacs/Org Mode. I've found [[https://gitlab.com/phillord/org-drill][org-drill]] for that. Using it is as simple as creating a ~.org~ file that conforms to the [[https://gitlab.com/phillord/org-drill/#writing-the-questions][specifications]], visiting that ~.org~ file and running ~org-drill~.

#+begin_src emacs-lisp
(use-package org-drill
  :ensure t)
#+end_src

** Org Roam
No note taking sticked for me as well as ~org-roam~ did.

#+begin_src emacs-lisp
(use-package org-roam
  :ensure t
  :custom
  (org-roam-directory "~/orgnzr/notes")
  (org-roam-completion-everywhere t)
  :config
  (org-roam-setup))
#+end_src

** Desktop Notifications
This allows for desktop notifications on MacOS.

#+begin_src emacs-lisp
(use-package org-alert
   :ensure t 
   :custom
   (org-alert-notification-title "Orgnzr")
   (org-alert-interval 600)
   (org-alert-notify-cutoff 5)
   (org-alert-notify-after-event-cutoff 10) 
   :config 
   (org-alert-enable))

(use-package alert 
   :ensure t 
   :config (setq alert-default-style 'osx-notifier))
#+end_src

* TODO Programming
** Treesitter
[[https://github.com/renzmann/treesit-auto][Treesit-auto]] greatly simplifies Treesitter usage within Emacs. Besides prompting for (and automatically installing) new grammars, it also sets the major mode for a language to its Treesitter mode, if one exists.

#+begin_src emacs-lisp
(use-package treesit-auto
  :custom
  (treesit-auto-install 'prompt)
  :config
  (treesit-auto-add-to-auto-mode-alist 'all)
  (global-treesit-auto-mode))
#+end_src

** TODO LSP Mode
For better or worse I am working as a web developer. Due to the ecosystem I need to have multiple LSPs for a single buffer. ~eglot~ does not support that, so for now I am stuck with using ~lsp-mode~ together with ~lsp-booster~.

#+begin_src emacs-lisp :tangle ./early-init.el
(setenv "LSP_USE_PLISTS" "true")
#+end_src

#+begin_src emacs-lisp
(use-package lsp-mode
	:custom
	(lsp-keymap-prefix "C-c l")
	(lsp-use-plists t)
	(lsp-log-io t)
	(lsp-auto-configure t)
  (lsp-enable-suggest-server-download t)
	(lsp-completion-enable t)
	(lsp-completion-show-kind t)
	(lsp-enable-file-watchers nil)
  (lsp-enable-folding nil)
	(lsp-enable-indentation nil)
  (lsp-enable-on-type-formatting nil)
  (lsp-enable-symbol-highlighting nil)
  (lsp-enable-text-document-color nil) 
	(lsp-enable-snippet nil)
	(lsp-semantic-tokens-enable nil)
	(lsp-headerline-breadcrumb-enable-diagnostics nil)
  (lsp-completion-provider :none)
  :init
  (defun dnsc/lsp-mode-setup-completion ()
    (setf (alist-get 'styles (alist-get 'lsp-capf completion-category-defaults))
          '(orderless)))
	:hook (
         (clojure-ts-mode . lsp)
         (bash-ts-mode . lsp)
         (typescript-ts-mode . lsp)
         (tsx-ts-mode . lsp)
         (js-ts-mode . lsp)
         (html-mode . lsp)
         (css-ts-mode . lsp)
         (json-ts-mode . lsp)
         (lsp-mode . lsp-enable-which-key-integration)
				 (lsp-completion-mode . dnsc/lsp-mode-setup-completion))
	:commands lsp)
#+end_src

This sets up ~lsp-booster~ to speed it all up.

#+begin_src emacs-lisp
(defun lsp-booster--advice-json-parse (old-fn &rest args)
  "Try to parse bytecode instead of json."
  (or
   (when (equal (following-char) ?#)
     (let ((bytecode (read (current-buffer))))
       (when (byte-code-function-p bytecode)
         (funcall bytecode))))
   (apply old-fn args)))
(advice-add (if (progn (require 'json)
                       (fboundp 'json-parse-buffer))
                'json-parse-buffer
              'json-read)
            :around
            #'lsp-booster--advice-json-parse)

(defun lsp-booster--advice-final-command (old-fn cmd &optional test?)
  "Prepend emacs-lsp-booster command to lsp CMD."
  (let ((orig-result (funcall old-fn cmd test?)))
    (if (and (not test?)                             ;; for check lsp-server-present?
             (not (file-remote-p default-directory)) ;; see lsp-resolve-final-command, it would add extra shell wrapper
             lsp-use-plists
             (not (functionp 'json-rpc-connection))  ;; native json-rpc
             (executable-find "emacs-lsp-booster"))
        (progn
          (when-let ((command-from-exec-path (executable-find (car orig-result))))  ;; resolve command from exec-path (in case not found in $PATH)
            (setcar orig-result command-from-exec-path))
          (message "Using emacs-lsp-booster for %s!" orig-result)
          (cons "emacs-lsp-booster" orig-result))
      orig-result)))
(advice-add 'lsp-resolve-final-command :around #'lsp-booster--advice-final-command)
#+end_src

** Languages
*** Javascript, JSX, Typescript & TSX
https://www.ovistoica.com/blog/2024-7-05-modern-emacs-typescript-web-tsx-config#orgf6d33f7

#+begin_src emacs-lisp
(use-package add-node-modules-path
  :ensure t
  :defer t
  :custom
  (eval-after-load 'typescript-ts-mode
	'(add-hook 'typescript-ts-mode-hook #'add-node-modules-path))
  (eval-after-load 'tsx-ts-mode
	'(add-hook 'tsx-ts-mode-hook #'add-node-modules-path))
  (eval-after-load 'typescriptreact-mode
	'(add-hook 'typescriptreact-mode-hook #'add-node-modules-path))
  (eval-after-load 'js-mode
	'(add-hook 'js-mode-hook #'add-node-modules-path)))

(use-package typescript-ts-mode
	:ensure nil
	:custom
	(typescript-ts-mode-indent-offset 2))
#+end_src

*** Clojure
**** clojure-ts-mode
This enables the Clojure Treesitter mode.

#+begin_src emacs-lisp
(use-package clojure-ts-mode
	:ensure t
	:custom
	(clojure-ts-comment-macro-font-lock-body t))
#+end_src

**** TODO CIDER
** TODO Formatter
https://github.com/radian-software/apheleia

** TODO AI Integration
 [[https://github.com/karthink/gptel][gptel]] together with ChatGPT-4o or Claude Sonnet 3.5 seems to be the best option. It should also work with Copilot. [[https://github.com/lanceberge/elysium][elysium]] is a package that automatically integrates generated code in the current buffer.

** TODO Run external services
I am trying [[https://github.com/rejeep/prodigy.el][Prodigy]] to manage multiple external services in an easy to use interface.

** TODO Terminal/Shell commands
- [ ] Terminal: https://codeberg.org/akib/emacs-eat or libvterm

* TODO Presentations
I want to emulate [[https://systemcrafters.net/emacs-tips/presentations-with-org-present/][Systemcrafter Presentations]] setup, so I am going to follow the respective blog post for setting this up.

* TODO Writing
** Spell Checker
The [[https://github.com/minad/jinx][JINX package]] provides a performant option for spell checking (see its README for details). To be able to use it a spell checker and dictionaries have to be installed. I use ~nuspell~ and added the dictionaries on my mac by following the instructions on [[https://github.com/wooorm/dictionaries/tree/main][wooorm/dictionaries]]. To compile ~jinx~ it is also necessary to do: ~brew install enchant pkgconf~.

#+begin_src emacs-lisp
(use-package jinx
  :hook (text-mode . jinx-mode))
#+end_src

** TODO Markdown Mode
** Typst Mode
The syntax highlighting and indentation is handled by [[https://codeberg.org/meow_king/typst-ts-mode][typst-ts-mode]].

#+begin_src emacs-lisp
(use-package typst-ts-mode
  :ensure (:type git :host codeberg :repo "meow_king/typst-ts-mode"
                 :files (:defaults "*.el"))
  :custom
	(typst-ts-mode-indent-offset 2)
  (typst-ts-watch-options "--open")
  (typst-ts-mode-grammar-location (expand-file-name "tree-sitter/libtree-sitter-typst.dylib" user-emacs-directory))
  (typst-ts-mode-enable-raw-blocks-highlight t))
  #+end_src

* Misc
** Diminish
This package implements hiding or abbreviation of the modeline displays (lighters) of minor-modes.
With this package installed, you can add ‘:diminish’ to any use-package block to hide that particular mode in the modeline.

#+begin_src emacs-lisp
(use-package diminish)
#+end_src

* Cleanup
** Elpaca Wait
To make sure that all ~:init~ and ~add-init-hook~'s are working I am using this [[https://github.com/progfolio/elpaca/issues?page=2&q=%3Ainit][workaround]] from the elpaca wiki.

#+begin_src emacs-lisp
(setq elpaca-after-init-time (or elpaca-after-init-time (current-time)))
(elpaca-wait)
#+end_src

** Runtime Performance
Dial the GC threshold back down so that garbage collection happens more frequently but in less time.
We also increase Read Process Output Max so Emacs can read more data.

#+begin_src emacs-lisp
;; Make gc pauses faster by decreasing the threshold.
(setq gc-cons-threshold (* 2 1000 1000))
;; Increase the amount of data which Emacs reads from the process
(setq read-process-output-max (* 1024 1024)) ;; 1mb
#+end_src
